name: CI/CD

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  test-rust:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Cache frontend build
        uses: actions/cache@v4
        with:
          path: dist
          key: ${{ runner.os }}-dist-${{ hashFiles('src/**', 'package-lock.json') }}

      - name: Build frontend
        run: npm run build

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install FFmpeg (macOS)
        run: brew install ffmpeg

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run Rust tests
        working-directory: src-tauri
        run: cargo test

      - name: Run Rust linter (clippy)
        working-directory: src-tauri
        run: cargo clippy -- -D warnings

      - name: Check Rust formatting
        working-directory: src-tauri
        run: cargo fmt --check

  test-frontend:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run frontend tests
        run: npm test

      - name: Run linter
        run: npm run lint

      - name: Run type check
        run: npm run type-check

      - name: Check formatting
        run: npm run format:check

  build:
    # Only build on main branch (after merge), not on every PR
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test-rust, test-frontend]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install FFmpeg (macOS)
        run: brew install ffmpeg

      - name: Install dependencies
        run: npm ci

      - name: Cache Cargo build
        uses: actions/cache@v4
        with:
          path: src-tauri/target/
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-release-
            ${{ runner.os }}-cargo-

      - name: Build Tauri app
        run: npm run tauri:build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: clipforge-${{ matrix.os }}
          path: |
            src-tauri/target/release/bundle/
